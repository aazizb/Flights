@page "/Update/{id:int}"
<link href="/validation.css" rel="stylesheet" />

<h1 class="bg-info text-white">Update Flight</h1>
<h2 class="text-success p-2">@FormSubmitMessage</h2>

<EditForm Model="Flight" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Id</label>
        <ValidationMessage For="@(() => Flight.Id)" />
        <InputNumber disabled class="form-control" @bind-Value="Flight.Id" />
    </div>
    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => Flight.Name)" />
        <InputText class="form-control" @bind-Value="Flight.Name" />
    </div>
    <div class="form-group">
        <label>Departure</label>
        <ValidationMessage For="@(() => Flight.Departure)" />
        <InputText class="form-control" @bind-Value="Flight.Departure" />
    </div>
    <div class="form-group">
        <label>Destination</label>
        <ValidationMessage For="@(() => Flight.Destination)" />
        <InputText class="form-control" @bind-Value="Flight.Destination" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Click</button>
    </div>
</EditForm>

@if (newFlight != null)
{
    <h3 class="text-warning p-2">Flight</h3>
    <table class="table table-sm table-striped table-bordered m-2">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Departure</th>
                <th>Destination</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@newFlight.Id</td>
                <td>@newFlight.Name</td>
                <td>@newFlight.Departure</td>
                <td>@newFlight.Destination</td>
            </tr>
        </tbody>
    </table>
}

@code {
    public Flight Flight;
    public Flight newFlight;

    public string FormSubmitMessage { get; set; } = "Flight Not Updated";

    [Parameter]
    public int Id { get; set; }

    public async Task HandleValidSubmit()
    {
        newFlight = new Flight();
        using (var httpClient = new HttpClient())
        {
            StringContent content = new StringContent(JsonConvert.SerializeObject(Flight), Encoding.UTF8, "application/json");

            using (var response = await httpClient.PutAsync("http://localhost:5130/api/flights", content))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                newFlight = JsonConvert.DeserializeObject<Flight>(apiResponse);
                if (response.IsSuccessStatusCode)
                {
                     FormSubmitMessage = "Flight Updated";
                    
                }
            }

        }
    }

    protected async override Task OnParametersSetAsync()
    {
        Flight = new Flight();
        using (var httpClient = new HttpClient())
        {
            using (var response = await httpClient.GetAsync("http://localhost:5130/api/flights/" + Id))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                Flight = JsonConvert.DeserializeObject<Flight>(apiResponse);
            }
        }
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Flight";
}